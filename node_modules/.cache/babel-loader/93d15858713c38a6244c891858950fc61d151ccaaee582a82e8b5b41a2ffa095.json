{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from '../../pages/auth/Auth';\nconst useIsAdmin = () => {\n  _s();\n  const {\n    loggedIn\n  } = useContext(AuthContext);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    const fetchAdminStatus = async () => {\n      try {\n        const loggedInUser = loggedIn; // Replace this with the code to get the logged-in user's username;\n        if (loggedInUser) {\n          const userId = await getUserId(loggedInUser);\n          if (userId) {\n            const isAdminUser = await checkAdmin(userId);\n            setIsAdmin(isAdminUser);\n          } else {\n            setIsAdmin(false); // User ID not found, consider the user as non-admin\n          }\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n        setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\n      }\n    };\n\n    fetchAdminStatus();\n  }, []);\n\n  // get the user ID based on the username\n  app.get('/api/username/:username', async (req, res) => {\n    const {\n      username\n    } = req.params;\n    try {\n      const userId = await dbOp.getUserIdByUsername(username);\n      if (userId) {\n        // Encrypt the user ID before sending it as a response\n        const encryptedUserId = encrypt(userId.toString());\n        res.json({\n          userId: encryptedUserId\n        });\n      } else {\n        res.status(404).json({\n          message: 'User not found'\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n      res.status(500).json({\n        message: 'Internal Server Error'\n      });\n    }\n  });\n\n  // check if the user ID is part of the admin table\n  app.get('/api/isadmin/:userId', async (req, res) => {\n    const {\n      userId\n    } = req.params;\n    try {\n      // Decrypt the user ID before using it in the query\n      const decryptedUserId = decrypt(userId);\n      const isAdmin = await dbOp.checkAdmin(decryptedUserId);\n      res.json({\n        isAdmin\n      });\n    } catch (error) {\n      console.error('Error checking admin:', error);\n      res.status(500).json({\n        message: 'Internal Server Error'\n      });\n    }\n  });\n  return isAdmin;\n};\n_s(useIsAdmin, \"Rz2KxrTZCdMMyQseeVe4YPvJ8Zs=\");\nexport default useIsAdmin;\n\n//works","map":{"version":3,"names":["React","useContext","useState","useEffect","AuthContext","useIsAdmin","_s","loggedIn","isAdmin","setIsAdmin","fetchAdminStatus","loggedInUser","userId","getUserId","isAdminUser","checkAdmin","error","console","app","get","req","res","username","params","dbOp","getUserIdByUsername","encryptedUserId","encrypt","toString","json","status","message","decryptedUserId","decrypt"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/components/isAdmin/isAdmin.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\n\r\nconst useIsAdmin = () => {\r\n    const { loggedIn } = useContext(AuthContext);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n  \r\n    useEffect(() => {\r\n        const fetchAdminStatus = async () => {\r\n            try {\r\n              const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\r\n              if (loggedInUser) {\r\n                const userId = await getUserId(loggedInUser);\r\n                if (userId) {\r\n                  const isAdminUser = await checkAdmin(userId);\r\n                  setIsAdmin(isAdminUser);\r\n                } else {\r\n                  setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n                }\r\n              }\r\n            } catch (error) {\r\n              console.error('Error checking admin status:', error);\r\n              setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\r\n            }\r\n          };\r\n      \r\n          fetchAdminStatus();\r\n        }, []);\r\n  \r\n\r\n\r\n // get the user ID based on the username\r\napp.get('/api/username/:username', async (req, res) => {\r\n    const { username } = req.params;\r\n    try {\r\n      const userId = await dbOp.getUserIdByUsername(username);\r\n      if (userId) {\r\n        // Encrypt the user ID before sending it as a response\r\n        const encryptedUserId = encrypt(userId.toString());\r\n        res.json({ userId: encryptedUserId });\r\n      } else {\r\n        res.status(404).json({ message: 'User not found' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user ID:', error);\r\n      res.status(500).json({ message: 'Internal Server Error' });\r\n    }\r\n  });\r\n  \r\n  // check if the user ID is part of the admin table\r\n  app.get('/api/isadmin/:userId', async (req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n      // Decrypt the user ID before using it in the query\r\n      const decryptedUserId = decrypt(userId);\r\n      const isAdmin = await dbOp.checkAdmin(decryptedUserId);\r\n      res.json({ isAdmin });\r\n    } catch (error) {\r\n      console.error('Error checking admin:', error);\r\n      res.status(500).json({ message: 'Internal Server Error' });\r\n    }\r\n  });\r\n\r\n  return isAdmin;\r\n};\r\n\r\nexport default useIsAdmin\r\n\r\n//works"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGN,UAAU,CAACG,WAAW,CAAC;EAC5C,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACZ,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,YAAY,GAAGJ,QAAQ,EAAC;QAC9B,IAAII,YAAY,EAAE;UAChB,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACF,YAAY,CAAC;UAC5C,IAAIC,MAAM,EAAE;YACV,MAAME,WAAW,GAAG,MAAMC,UAAU,CAACH,MAAM,CAAC;YAC5CH,UAAU,CAACK,WAAW,CAAC;UACzB,CAAC,MAAM;YACLL,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;UACrB;QACF;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;;IAEDC,gBAAgB,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;;EAIb;EACDQ,GAAG,CAACC,GAAG,CAAC,yBAAyB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;IACnD,MAAM;MAAEC;IAAS,CAAC,GAAGF,GAAG,CAACG,MAAM;IAC/B,IAAI;MACF,MAAMX,MAAM,GAAG,MAAMY,IAAI,CAACC,mBAAmB,CAACH,QAAQ,CAAC;MACvD,IAAIV,MAAM,EAAE;QACV;QACA,MAAMc,eAAe,GAAGC,OAAO,CAACf,MAAM,CAACgB,QAAQ,EAAE,CAAC;QAClDP,GAAG,CAACQ,IAAI,CAAC;UAAEjB,MAAM,EAAEc;QAAgB,CAAC,CAAC;MACvC,CAAC,MAAM;QACLL,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;UAAEE,OAAO,EAAE;QAAiB,CAAC,CAAC;MACrD;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CK,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAAEE,OAAO,EAAE;MAAwB,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC;;EAEF;EACAb,GAAG,CAACC,GAAG,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;IAClD,MAAM;MAAET;IAAO,CAAC,GAAGQ,GAAG,CAACG,MAAM;IAC7B,IAAI;MACF;MACA,MAAMS,eAAe,GAAGC,OAAO,CAACrB,MAAM,CAAC;MACvC,MAAMJ,OAAO,GAAG,MAAMgB,IAAI,CAACT,UAAU,CAACiB,eAAe,CAAC;MACtDX,GAAG,CAACQ,IAAI,CAAC;QAAErB;MAAQ,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CK,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACD,IAAI,CAAC;QAAEE,OAAO,EAAE;MAAwB,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC;EAEF,OAAOvB,OAAO;AAChB,CAAC;AAACF,EAAA,CA7DID,UAAU;AA+DhB,eAAeA,UAAU;;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}