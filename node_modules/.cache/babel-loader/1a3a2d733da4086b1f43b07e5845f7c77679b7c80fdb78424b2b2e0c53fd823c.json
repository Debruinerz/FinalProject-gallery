{"ast":null,"code":"const crypto = require('crypto');\nconst ENCRYPTION_ALGORITHM = 'aes-256-cbc';\nconst ENCRYPTION_KEY = 'yourSecretEncryptionKey'; // Replace this with your secure encryption key\n\nconst decrypt = encryptedData => {\n  try {\n    if (!encryptedData) {\n      console.error('Encrypted data is empty');\n      return null;\n    }\n\n    // Split the IV and encrypted data from the combined string\n    const [ivHex, encryptedHex] = encryptedData.split(':');\n    const iv = Buffer.from(ivHex, 'hex');\n    const encrypted = Buffer.from(encryptedHex, 'hex');\n\n    // Decrypt using the extracted IV and the encryption key\n    const decipher = crypto.createDecipheriv(ENCRYPTION_ALGORITHM, ENCRYPTION_KEY, iv);\n    let decryptedData = decipher.update(encrypted, 'hex', 'utf8');\n    decryptedData += decipher.final('utf8');\n    return decryptedData;\n  } catch (error) {\n    console.error('Error decrypting data:', error);\n    return null;\n  }\n};\nmodule.exports = decrypt;","map":{"version":3,"names":["crypto","require","ENCRYPTION_ALGORITHM","ENCRYPTION_KEY","decrypt","encryptedData","console","error","ivHex","encryptedHex","split","iv","Buffer","from","encrypted","decipher","createDecipheriv","decryptedData","update","final","module","exports"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/components/crypto/Decryption.js"],"sourcesContent":["const crypto = require('crypto');\r\n\r\nconst ENCRYPTION_ALGORITHM = 'aes-256-cbc';\r\nconst ENCRYPTION_KEY = 'yourSecretEncryptionKey'; // Replace this with your secure encryption key\r\n\r\nconst decrypt = (encryptedData) => {\r\n  try {\r\n    if (!encryptedData) {\r\n      console.error('Encrypted data is empty');\r\n      return null;\r\n    }\r\n\r\n    // Split the IV and encrypted data from the combined string\r\n    const [ivHex, encryptedHex] = encryptedData.split(':');\r\n    const iv = Buffer.from(ivHex, 'hex');\r\n    const encrypted = Buffer.from(encryptedHex, 'hex');\r\n\r\n    // Decrypt using the extracted IV and the encryption key\r\n    const decipher = crypto.createDecipheriv(ENCRYPTION_ALGORITHM, ENCRYPTION_KEY, iv);\r\n    let decryptedData = decipher.update(encrypted, 'hex', 'utf8');\r\n    decryptedData += decipher.final('utf8');\r\n    return decryptedData;\r\n  } catch (error) {\r\n    console.error('Error decrypting data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nmodule.exports = decrypt;"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,oBAAoB,GAAG,aAAa;AAC1C,MAAMC,cAAc,GAAG,yBAAyB,CAAC,CAAC;;AAElD,MAAMC,OAAO,GAAIC,aAAa,IAAK;EACjC,IAAI;IACF,IAAI,CAACA,aAAa,EAAE;MAClBC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO,IAAI;IACb;;IAEA;IACA,MAAM,CAACC,KAAK,EAAEC,YAAY,CAAC,GAAGJ,aAAa,CAACK,KAAK,CAAC,GAAG,CAAC;IACtD,MAAMC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,EAAE,KAAK,CAAC;IACpC,MAAMM,SAAS,GAAGF,MAAM,CAACC,IAAI,CAACJ,YAAY,EAAE,KAAK,CAAC;;IAElD;IACA,MAAMM,QAAQ,GAAGf,MAAM,CAACgB,gBAAgB,CAACd,oBAAoB,EAAEC,cAAc,EAAEQ,EAAE,CAAC;IAClF,IAAIM,aAAa,GAAGF,QAAQ,CAACG,MAAM,CAACJ,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC;IAC7DG,aAAa,IAAIF,QAAQ,CAACI,KAAK,CAAC,MAAM,CAAC;IACvC,OAAOF,aAAa;EACtB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGjB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}