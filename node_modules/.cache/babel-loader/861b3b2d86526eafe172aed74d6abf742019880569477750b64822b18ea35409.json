{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aodha\\\\OneDrive\\\\Desktop\\\\react-cw\\\\cw4\\\\src\\\\pages\\\\user\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../pages/auth/Auth';\nimport Footer from '../../components/footer/Footer';\nimport Header from '../../components/header/Header';\nimport { useDarkMode } from '../../pages/darkmode/DarkMode';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const secretPass = 'XkhZG4fW2t2W';\n\n  // const [loginData, setLoginData] = useState({\n  //   username: '',\n  //   password: '',\n  // });\n  // const [isSubmitted, setIsSubmitted] = useState(false);\n  // const { login } = useContext(AuthContext); \n  // const navigate = useNavigate();\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   if (validateForm()) {\n  //     try {\n  //       // Perform login request to backend\n  //       const response = await fetch('http://localhost:5000/api/login', {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify(loginData),\n  //       });\n\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok');\n  //       }\n\n  //       //const result = await response.json();\n  //       console.log('Logged in:', loginData.username);\n  //       login(loginData.username); \n  //       setIsSubmitted(true);\n  //       setLoginData({\n  //         username: '',\n  //         password: '',\n  //       });\n  //       navigate('/'); \n  //     } catch (error) {\n  //       console.error('Error:', error);\n  //     }\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validateForm()) {\n      try {\n        // Encrypt the password before sending it to the backend\n        const encryptedPassword = CryptoJS.AES.encrypt(loginData.password, secretPass).toString();\n\n        // Perform login request to backend with encrypted password\n        const response = await fetch('http://localhost:5000/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ...loginData,\n            password: encryptedPassword\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        //const result = await response.json();\n        console.log('Logged in:', loginData.username);\n        login(loginData.username);\n        setIsSubmitted(true);\n        setLoginData({\n          username: '',\n          password: ''\n        });\n        navigate('/');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLoginData({\n      ...loginData,\n      [name]: value\n    });\n  };\n  const validateForm = () => {\n    const {\n      username,\n      password\n    } = loginData;\n    if (!username.trim() || !password.trim()) {\n      alert('Username and password are required');\n      return false;\n    }\n    return true;\n  };\n  const {\n    darkMode\n  } = useDarkMode();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `wrapper ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: loginData.username,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: loginData.password,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), isSubmitted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Login Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You have successfully logged in.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsSubmitted(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"HvlUGfrb1+gsCIZD1j97B64/TGM=\", false, function () {\n  return [useDarkMode];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useContext","useNavigate","AuthContext","Footer","Header","useDarkMode","CryptoJS","jsxDEV","_jsxDEV","Login","_s","secretPass","handleSubmit","e","preventDefault","validateForm","encryptedPassword","AES","encrypt","loginData","password","toString","response","fetch","method","headers","body","JSON","stringify","ok","Error","console","log","username","login","setIsSubmitted","setLoginData","navigate","error","handleChange","name","value","target","trim","alert","darkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","required","isSubmitted","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/pages/user/Login.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\nimport Footer from '../../components/footer/Footer';\r\nimport Header from '../../components/header/Header';\r\nimport { useDarkMode } from '../../pages/darkmode/DarkMode';\r\nimport CryptoJS from 'crypto-js';\r\n\r\n\r\nconst Login = () => {\r\n  const secretPass = 'XkhZG4fW2t2W';\r\n\r\n  // const [loginData, setLoginData] = useState({\r\n  //   username: '',\r\n  //   password: '',\r\n  // });\r\n  // const [isSubmitted, setIsSubmitted] = useState(false);\r\n  // const { login } = useContext(AuthContext); \r\n  // const navigate = useNavigate();\r\n\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n  //   if (validateForm()) {\r\n  //     try {\r\n  //       // Perform login request to backend\r\n  //       const response = await fetch('http://localhost:5000/api/login', {\r\n  //         method: 'POST',\r\n  //         headers: { 'Content-Type': 'application/json' },\r\n  //         body: JSON.stringify(loginData),\r\n  //       });\r\n\r\n  //       if (!response.ok) {\r\n  //         throw new Error('Network response was not ok');\r\n  //       }\r\n\r\n  //       //const result = await response.json();\r\n  //       console.log('Logged in:', loginData.username);\r\n  //       login(loginData.username); \r\n  //       setIsSubmitted(true);\r\n  //       setLoginData({\r\n  //         username: '',\r\n  //         password: '',\r\n  //       });\r\n  //       navigate('/'); \r\n  //     } catch (error) {\r\n  //       console.error('Error:', error);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      try {\r\n        // Encrypt the password before sending it to the backend\r\n        const encryptedPassword = CryptoJS.AES.encrypt(loginData.password, secretPass).toString();\r\n  \r\n        // Perform login request to backend with encrypted password\r\n        const response = await fetch('http://localhost:5000/api/login', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ ...loginData, password: encryptedPassword }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n  \r\n        //const result = await response.json();\r\n        console.log('Logged in:', loginData.username);\r\n        login(loginData.username);\r\n        setIsSubmitted(true);\r\n        setLoginData({\r\n          username: '',\r\n          password: '',\r\n        });\r\n        navigate('/');\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginData({ ...loginData, [name]: value });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const { username, password } = loginData;\r\n\r\n    if (!username.trim() || !password.trim()) {\r\n      alert('Username and password are required');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const { darkMode } = useDarkMode();\r\n\r\n  return (\r\n    <div className={`wrapper ${darkMode ? 'dark-mode' : ''}`}>\r\n      <Header/>\r\n      <h1>Login</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input type=\"text\" name=\"username\" value={loginData.username} onChange={handleChange} required />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input type=\"password\" name=\"password\" value={loginData.password} onChange={handleChange} required />\r\n        </div>\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n      {isSubmitted && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <h3>Login Successful</h3>\r\n            <p>You have successfully logged in.</p>\r\n            <button onClick={() => setIsSubmitted(false)}>Close</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <Footer/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}