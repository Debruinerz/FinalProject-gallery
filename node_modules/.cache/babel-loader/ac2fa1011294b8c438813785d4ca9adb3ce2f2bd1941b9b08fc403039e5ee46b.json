{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from '../../pages/auth/Auth';\nconst useIsAdmin = () => {\n  _s();\n  const {\n    loggedIn\n  } = useContext(AuthContext);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // useEffect(() => {\n  //     const fetchAdminStatus = async () => {\n  //         try {\n  //           const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\n  //           if (loggedInUser) {\n  //             const userId = await getUserId(loggedInUser);\n  //             if (userId) {\n  //               const isAdminUser = await checkAdmin(userId);\n  //               setIsAdmin(isAdminUser);\n  //             } else {\n  //               setIsAdmin(false); // User ID not found, consider the user as non-admin\n  //             }\n  //           }\n  //         } catch (error) {\n  //           console.error('Error checking admin status:', error);\n  //           setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\n  //         }\n  //       };\n\n  //       fetchAdminStatus();\n  //     }, []);\n\n  // get user based on username\n\n  const getUserId = async username => {\n    try {\n      // Replace the URL with the endpoint that fetches the user ID based on the username\n      const response = await fetch(`http://localhost:5000/api/username/${username}`);\n      const data = await response.json();\n      if (data && data.userId) {\n        return data.userId;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n      return null;\n    }\n  };\n\n  // check if admin based on userid\n\n  const checkAdmin = async userId => {\n    try {\n      // Replace the URL with the endpoint that checks if the user ID is part of the admin table\n      const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\n      const data = await response.json();\n      if (data && data.isAdmin) {\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error checking admin:', error);\n      return false;\n    }\n  };\n  return isAdmin;\n};\n_s(useIsAdmin, \"ITVtiw3UWKkWuoCD1igozNC3w1o=\");\nexport default useIsAdmin;\n\n//works","map":{"version":3,"names":["React","useContext","useState","useEffect","AuthContext","useIsAdmin","_s","loggedIn","isAdmin","setIsAdmin","getUserId","username","response","fetch","data","json","userId","error","console","checkAdmin"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/components/isAdmin/isAdmin.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\n\r\nconst useIsAdmin = () => {\r\n    const { loggedIn } = useContext(AuthContext);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n  \r\n    // useEffect(() => {\r\n    //     const fetchAdminStatus = async () => {\r\n    //         try {\r\n    //           const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\r\n    //           if (loggedInUser) {\r\n    //             const userId = await getUserId(loggedInUser);\r\n    //             if (userId) {\r\n    //               const isAdminUser = await checkAdmin(userId);\r\n    //               setIsAdmin(isAdminUser);\r\n    //             } else {\r\n    //               setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n    //             }\r\n    //           }\r\n    //         } catch (error) {\r\n    //           console.error('Error checking admin status:', error);\r\n    //           setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\r\n    //         }\r\n    //       };\r\n      \r\n    //       fetchAdminStatus();\r\n    //     }, []);\r\n\r\n    \r\n  \r\n\r\n\r\n  // get user based on username\r\n\r\n  const getUserId = async (username) => {\r\n    try {\r\n      // Replace the URL with the endpoint that fetches the user ID based on the username\r\n      const response = await fetch(`http://localhost:5000/api/username/${username}`);\r\n      const data = await response.json();\r\n      if (data && data.userId) {\r\n        return data.userId;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching user ID:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // check if admin based on userid\r\n\r\n  const checkAdmin = async (userId) => {\r\n    try {\r\n      // Replace the URL with the endpoint that checks if the user ID is part of the admin table\r\n      const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\r\n      const data = await response.json();\r\n      if (data && data.isAdmin) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error checking admin:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return isAdmin;\r\n};\r\n\r\nexport default useIsAdmin\r\n\r\n//works"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,uBAAuB;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGN,UAAU,CAACG,WAAW,CAAC;EAC5C,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAMF;;EAEA,MAAMQ,SAAS,GAAG,MAAOC,QAAQ,IAAK;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCF,QAAS,EAAC,CAAC;MAC9E,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,IAAID,IAAI,IAAIA,IAAI,CAACE,MAAM,EAAE;QACvB,OAAOF,IAAI,CAACE,MAAM;MACpB;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;EACF,CAAC;;EAED;;EAEA,MAAME,UAAU,GAAG,MAAOH,MAAM,IAAK;IACnC,IAAI;MACF;MACA,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCG,MAAO,EAAC,CAAC;MAC3E,MAAMF,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,IAAID,IAAI,IAAIA,IAAI,CAACN,OAAO,EAAE;QACxB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAOT,OAAO;AAChB,CAAC;AAACF,EAAA,CAjEID,UAAU;AAmEhB,eAAeA,UAAU;;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}