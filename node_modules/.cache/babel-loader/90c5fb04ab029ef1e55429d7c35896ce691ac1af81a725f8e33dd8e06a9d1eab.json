{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from '../../pages/auth/Auth';\n\n// const useIsAdmin = () => {\n//     const { loggedIn } = useContext(AuthContext);\n//     const [isAdmin, setIsAdmin] = useState(false);\n\n//     useEffect(() => {\n//         const fetchAdminStatus = async () => {\n//             try {\n//               const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\n//               if (loggedInUser) {\n//                 const userId = await getUserId(loggedInUser);\n//                 if (userId) {\n//                   const isAdminUser = await checkAdmin(userId);\n//                   setIsAdmin(isAdminUser);\n//                 } else {\n//                   setIsAdmin(false); // User ID not found, consider the user as non-admin\n//                 }\n//               }\n//             } catch (error) {\n//               console.error('Error checking admin status:', error);\n//               setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\n//             }\n//           };\n\n//           fetchAdminStatus();\n//         }, []);\n\n//   // get user based on username\n\n//   const getUserId = async (username) => {\n//     try {\n//       // Replace the URL with the endpoint that fetches the user ID based on the username\n//       const response = await fetch(`http://localhost:5000/api/username/${username}`);\n//       const data = await response.json();\n//       if (data && data.userId) {\n//         return data.userId;\n//       }\n//       return null;\n//     } catch (error) {\n//       console.error('Error fetching user ID:', error);\n//       return null;\n//     }\n//   };\n\n//   // check if admin based on userid\n\n//   const checkAdmin = async (userId) => {\n//     try {\n//       // Replace the URL with the endpoint that checks if the user ID is part of the admin table\n//       const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\n//       const data = await response.json();\n//       if (data && data.isAdmin) {\n//         return true;\n//       }\n//       return false;\n//     } catch (error) {\n//       console.error('Error checking admin:', error);\n//       return false;\n//     }\n//   };\n\n//   return isAdmin;\n// };\n\n// export default useIsAdmin\n\n// //works","map":{"version":3,"names":["React","useContext","useState","useEffect","AuthContext"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/components/isAdmin/isAdmin.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\n\r\n\r\n\r\n\r\n\r\n// const useIsAdmin = () => {\r\n//     const { loggedIn } = useContext(AuthContext);\r\n//     const [isAdmin, setIsAdmin] = useState(false);\r\n  \r\n//     useEffect(() => {\r\n//         const fetchAdminStatus = async () => {\r\n//             try {\r\n//               const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\r\n//               if (loggedInUser) {\r\n//                 const userId = await getUserId(loggedInUser);\r\n//                 if (userId) {\r\n//                   const isAdminUser = await checkAdmin(userId);\r\n//                   setIsAdmin(isAdminUser);\r\n//                 } else {\r\n//                   setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n//                 }\r\n//               }\r\n//             } catch (error) {\r\n//               console.error('Error checking admin status:', error);\r\n//               setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\r\n//             }\r\n//           };\r\n      \r\n//           fetchAdminStatus();\r\n//         }, []);\r\n  \r\n\r\n\r\n//   // get user based on username\r\n\r\n//   const getUserId = async (username) => {\r\n//     try {\r\n//       // Replace the URL with the endpoint that fetches the user ID based on the username\r\n//       const response = await fetch(`http://localhost:5000/api/username/${username}`);\r\n//       const data = await response.json();\r\n//       if (data && data.userId) {\r\n//         return data.userId;\r\n//       }\r\n//       return null;\r\n//     } catch (error) {\r\n//       console.error('Error fetching user ID:', error);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   // check if admin based on userid\r\n\r\n//   const checkAdmin = async (userId) => {\r\n//     try {\r\n//       // Replace the URL with the endpoint that checks if the user ID is part of the admin table\r\n//       const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\r\n//       const data = await response.json();\r\n//       if (data && data.isAdmin) {\r\n//         return true;\r\n//       }\r\n//       return false;\r\n//     } catch (error) {\r\n//       console.error('Error checking admin:', error);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   return isAdmin;\r\n// };\r\n\r\n// export default useIsAdmin\r\n\r\n// //works"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,uBAAuB;;AAMnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}