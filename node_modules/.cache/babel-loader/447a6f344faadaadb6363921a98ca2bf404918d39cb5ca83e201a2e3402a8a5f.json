{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aodha\\\\OneDrive\\\\Desktop\\\\react-cw\\\\cw4\\\\src\\\\pages\\\\user\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../pages/auth/Auth';\nimport Footer from '../../components/footer/Footer';\nimport Header from '../../components/header/Header';\nimport { useDarkMode } from '../../pages/darkmode/DarkMode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [loginData, setLoginData] = useState({\n    username: '',\n    password: ''\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const {\n    login\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validateForm()) {\n      try {\n        // Perform login request to backend\n        const response = await fetch('http://localhost:5000/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(loginData)\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        //const result = await response.json();\n        console.log('Logged in:', loginData.username);\n        login(loginData.username);\n        setIsSubmitted(true);\n        setLoginData({\n          username: '',\n          password: ''\n        });\n        navigate('/');\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setLoginData({\n      ...loginData,\n      [name]: value\n    });\n  };\n  const validateForm = () => {\n    const {\n      username,\n      password\n    } = loginData;\n    if (!username.trim() || !password.trim()) {\n      alert('Username and password are required');\n      return false;\n    }\n    return true;\n  };\n  const [questionnaireStep, setQuestionnaireStep] = useState(0);\n  const [userMatch, setUserMatch] = useState(null);\n  const questions = [{\n    id: 1,\n    label: 'Email:',\n    name: 'email',\n    type: 'email',\n    value: ''\n  }, {\n    id: 2,\n    label: 'Date of Birth:',\n    name: 'dob',\n    type: 'date',\n    value: ''\n  }, {\n    id: 3,\n    label: 'Phone Number:',\n    name: 'phoneNumber',\n    type: 'tel',\n    value: ''\n  }];\n  const handleQuestionnaireSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/api/checkUser', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: questions[0].value,\n          dob: questions[1].value,\n          phoneNumber: questions[2].value\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      if (result.match) {\n        setUserMatch(result.user);\n        setQuestionnaireStep(questionnaireStep + 1);\n      } else {\n        alert('The provided information does not match any user.');\n        resetQuestionnaire();\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleAnswerChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedQuestions = questions.map(question => question.name === name ? {\n      ...question,\n      value\n    } : question);\n    setQuestions(updatedQuestions);\n  };\n  const resetQuestionnaire = () => {\n    setUserMatch(null);\n    setQuestionnaireStep(0);\n    setQuestions(questions.map(question => ({\n      ...question,\n      value: ''\n    })));\n  };\n  const renderQuestion = question => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: question.name,\n      children: question.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: question.type,\n      name: question.name,\n      value: question.value,\n      onChange: handleAnswerChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, question.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n  const {\n    darkMode\n  } = useDarkMode();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `wrapper ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), questionnaireStep === 0 ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleQuestionnaireSubmit,\n      children: [questions.map((question, index) => index < questionnaireStep ? null : renderQuestion(question)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : null, questionnaireStep === 1 && userMatch ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Match Found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please fill out the form below to reset your password.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"qUS4+XoWJiXzzEBhbJVQSiNGhmU=\", false, function () {\n  return [useNavigate, useDarkMode];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useContext","useNavigate","AuthContext","Footer","Header","useDarkMode","jsxDEV","_jsxDEV","Login","_s","loginData","setLoginData","username","password","isSubmitted","setIsSubmitted","login","navigate","handleSubmit","e","preventDefault","validateForm","response","fetch","method","headers","body","JSON","stringify","ok","Error","console","log","error","handleChange","name","value","target","trim","alert","questionnaireStep","setQuestionnaireStep","userMatch","setUserMatch","questions","id","label","type","handleQuestionnaireSubmit","email","dob","phoneNumber","result","json","match","user","resetQuestionnaire","handleAnswerChange","updatedQuestions","map","question","setQuestions","renderQuestion","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","required","darkMode","className","onSubmit","index","_c","$RefreshReg$"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/pages/user/Login.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\nimport Footer from '../../components/footer/Footer';\r\nimport Header from '../../components/header/Header';\r\nimport { useDarkMode } from '../../pages/darkmode/DarkMode';\r\n\r\nconst Login = () => {\r\n  const [loginData, setLoginData] = useState({\r\n    username: '',\r\n    password: '',\r\n  });\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const { login } = useContext(AuthContext); \r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      try {\r\n        // Perform login request to backend\r\n        const response = await fetch('http://localhost:5000/api/login', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(loginData),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        //const result = await response.json();\r\n        console.log('Logged in:', loginData.username);\r\n        login(loginData.username); \r\n        setIsSubmitted(true);\r\n        setLoginData({\r\n          username: '',\r\n          password: '',\r\n        });\r\n        navigate('/'); \r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setLoginData({ ...loginData, [name]: value });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const { username, password } = loginData;\r\n\r\n    if (!username.trim() || !password.trim()) {\r\n      alert('Username and password are required');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const [questionnaireStep, setQuestionnaireStep] = useState(0);\r\n  const [userMatch, setUserMatch] = useState(null);\r\n\r\n  const questions = [\r\n    { id: 1, label: 'Email:', name: 'email', type: 'email', value: '' },\r\n    { id: 2, label: 'Date of Birth:', name: 'dob', type: 'date', value: '' },\r\n    { id: 3, label: 'Phone Number:', name: 'phoneNumber', type: 'tel', value: '' },\r\n  ];\r\n\r\n  const handleQuestionnaireSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/checkUser', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          email: questions[0].value,\r\n          dob: questions[1].value,\r\n          phoneNumber: questions[2].value,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.match) {\r\n        setUserMatch(result.user);\r\n        setQuestionnaireStep(questionnaireStep + 1);\r\n      } else {\r\n        alert('The provided information does not match any user.');\r\n        resetQuestionnaire();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const handleAnswerChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const updatedQuestions = questions.map((question) =>\r\n      question.name === name ? { ...question, value } : question\r\n    );\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const resetQuestionnaire = () => {\r\n    setUserMatch(null);\r\n    setQuestionnaireStep(0);\r\n    setQuestions(questions.map((question) => ({ ...question, value: '' })));\r\n  };\r\n\r\n  const renderQuestion = (question) => (\r\n    <div key={question.id}>\r\n      <label htmlFor={question.name}>{question.label}</label>\r\n      <input\r\n        type={question.type}\r\n        name={question.name}\r\n        value={question.value}\r\n        onChange={handleAnswerChange}\r\n        required\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const { darkMode } = useDarkMode();\r\n\r\n  return (\r\n    <div className={`wrapper ${darkMode ? 'dark-mode' : ''}`}>\r\n      <Header />\r\n      <h1>Login</h1>\r\n      {questionnaireStep === 0 ? (\r\n        <form onSubmit={handleQuestionnaireSubmit}>\r\n          {questions.map((question, index) =>\r\n            index < questionnaireStep ? null : renderQuestion(question)\r\n          )}\r\n          <button type=\"submit\">Next</button>\r\n        </form>\r\n      ) : null}\r\n\r\n      {/* Step 2: Display a success message */}\r\n      {questionnaireStep === 1 && userMatch ? (\r\n        <div>\r\n          <h3>Match Found!</h3>\r\n          <p>Please fill out the form below to reset your password.</p>\r\n          {/* Add your update password form here, using 'userMatch' as needed */}\r\n          {/* For example: */}\r\n          {/* <form onSubmit={handlePasswordReset}>\r\n              <input type=\"password\" name=\"newPassword\" value={newPassword} onChange={handlePasswordChange} required />\r\n              <button type=\"submit\">Reset Password</button>\r\n          </form> */}\r\n        </div>\r\n      ) : null}\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}