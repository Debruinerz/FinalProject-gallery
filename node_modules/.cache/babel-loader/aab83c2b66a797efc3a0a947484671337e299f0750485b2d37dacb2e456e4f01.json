{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect } from 'react';\nimport { AuthContext } from '../../pages/auth/Auth';\nimport decrypt from './Decrypt';\nconst useIsAdmin = () => {\n  _s();\n  const {\n    loggedIn\n  } = useContext(AuthContext);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // useEffect(() => {\n  //     const fetchAdminStatus = async () => {\n  //         try {\n  //           const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\n  //           if (loggedInUser) {\n  //             const userId = await getUserId(loggedInUser);\n  //             if (userId) {\n  //               const isAdminUser = await checkAdmin(userId);\n  //               setIsAdmin(isAdminUser);\n  //             } else {\n  //               setIsAdmin(false); // User ID not found, consider the user as non-admin\n  //             }\n  //           }\n  //         } catch (error) {\n  //           console.error('Error checking admin status:', error);\n  //           setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\n  //         }\n  //       };\n\n  //       fetchAdminStatus();\n  //     }, []);\n\n  useEffect(() => {\n    const fetchAdminStatus = async () => {\n      try {\n        const loggedInUser = loggedIn; // Replace this with the code to get the logged-in user's username;\n        if (loggedInUser) {\n          const userId = await getUserId(loggedInUser);\n          if (userId) {\n            const decryptedUserId = decrypt(userId); // Decrypt the user ID received from the backend\n            if (decryptedUserId) {\n              const isAdminUser = await checkAdmin(decryptedUserId);\n              setIsAdmin(isAdminUser);\n            } else {\n              setIsAdmin(false); // User ID not found, consider the user as non-admin\n            }\n          } else {\n            setIsAdmin(false); // User ID not found, consider the user as non-admin\n          }\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n        setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\n      }\n    };\n\n    fetchAdminStatus();\n  }, [loggedIn]);\n\n  // get user based on username\n\n  const getUserId = async username => {\n    try {\n      // Replace the URL with the endpoint that fetches the user ID based on the username\n      const response = await fetch(`http://localhost:5000/api/username/${username}`);\n      const data = await response.json();\n      if (data && data.userId) {\n        return data.userId;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching user ID:', error);\n      return null;\n    }\n  };\n\n  // check if admin based on userid\n\n  const checkAdmin = async userId => {\n    try {\n      // Replace the URL with the endpoint that checks if the user ID is part of the admin table\n      const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\n      const data = await response.json();\n      if (data && data.isAdmin) {\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error checking admin:', error);\n      return false;\n    }\n  };\n  return isAdmin;\n};\n_s(useIsAdmin, \"Rz2KxrTZCdMMyQseeVe4YPvJ8Zs=\");\nexport default useIsAdmin;\n\n//works","map":{"version":3,"names":["React","useContext","useState","useEffect","AuthContext","decrypt","useIsAdmin","_s","loggedIn","isAdmin","setIsAdmin","fetchAdminStatus","loggedInUser","userId","getUserId","decryptedUserId","isAdminUser","checkAdmin","error","console","username","response","fetch","data","json"],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/components/isAdmin/isAdmin.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { AuthContext } from '../../pages/auth/Auth';\r\nimport decrypt from './Decrypt';\r\n\r\nconst useIsAdmin = () => {\r\n    const { loggedIn } = useContext(AuthContext);\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n  \r\n    // useEffect(() => {\r\n    //     const fetchAdminStatus = async () => {\r\n    //         try {\r\n    //           const loggedInUser = loggedIn // Replace this with the code to get the logged-in user's username;\r\n    //           if (loggedInUser) {\r\n    //             const userId = await getUserId(loggedInUser);\r\n    //             if (userId) {\r\n    //               const isAdminUser = await checkAdmin(userId);\r\n    //               setIsAdmin(isAdminUser);\r\n    //             } else {\r\n    //               setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n    //             }\r\n    //           }\r\n    //         } catch (error) {\r\n    //           console.error('Error checking admin status:', error);\r\n    //           setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\r\n    //         }\r\n    //       };\r\n      \r\n    //       fetchAdminStatus();\r\n    //     }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchAdminStatus = async () => {\r\n          try {\r\n            const loggedInUser = loggedIn; // Replace this with the code to get the logged-in user's username;\r\n            if (loggedInUser) {\r\n              const userId = await getUserId(loggedInUser);\r\n              if (userId) {\r\n                const decryptedUserId = decrypt(userId); // Decrypt the user ID received from the backend\r\n                if (decryptedUserId) {\r\n                  const isAdminUser = await checkAdmin(decryptedUserId);\r\n                  setIsAdmin(isAdminUser);\r\n                } else {\r\n                  setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n                }\r\n              } else {\r\n                setIsAdmin(false); // User ID not found, consider the user as non-admin\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('Error checking admin status:', error);\r\n            setIsAdmin(false); // Handle the error gracefully by considering the user as non-admin\r\n          }\r\n        };\r\n    \r\n        fetchAdminStatus();\r\n      }, [loggedIn]);\r\n  \r\n\r\n\r\n  // get user based on username\r\n\r\n  const getUserId = async (username) => {\r\n    try {\r\n      // Replace the URL with the endpoint that fetches the user ID based on the username\r\n      const response = await fetch(`http://localhost:5000/api/username/${username}`);\r\n      const data = await response.json();\r\n      if (data && data.userId) {\r\n        return data.userId;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching user ID:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // check if admin based on userid\r\n\r\n  const checkAdmin = async (userId) => {\r\n    try {\r\n      // Replace the URL with the endpoint that checks if the user ID is part of the admin table\r\n      const response = await fetch(`http://localhost:5000/api/isadmin/${userId}`);\r\n      const data = await response.json();\r\n      if (data && data.isAdmin) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error checking admin:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return isAdmin;\r\n};\r\n\r\nexport default useIsAdmin\r\n\r\n//works"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,uBAAuB;AACnD,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGP,UAAU,CAACG,WAAW,CAAC;EAC5C,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,YAAY,GAAGJ,QAAQ,CAAC,CAAC;QAC/B,IAAII,YAAY,EAAE;UAChB,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACF,YAAY,CAAC;UAC5C,IAAIC,MAAM,EAAE;YACV,MAAME,eAAe,GAAGV,OAAO,CAACQ,MAAM,CAAC,CAAC,CAAC;YACzC,IAAIE,eAAe,EAAE;cACnB,MAAMC,WAAW,GAAG,MAAMC,UAAU,CAACF,eAAe,CAAC;cACrDL,UAAU,CAACM,WAAW,CAAC;YACzB,CAAC,MAAM;cACLN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB;UACF,CAAC,MAAM;YACLA,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;UACrB;QACF;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;;IAEDC,gBAAgB,EAAE;EACpB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;;EAIlB;;EAEA,MAAMM,SAAS,GAAG,MAAOM,QAAQ,IAAK;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCF,QAAS,EAAC,CAAC;MAC9E,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,IAAID,IAAI,IAAIA,IAAI,CAACV,MAAM,EAAE;QACvB,OAAOU,IAAI,CAACV,MAAM;MACpB;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;EACF,CAAC;;EAED;;EAEA,MAAMD,UAAU,GAAG,MAAOJ,MAAM,IAAK;IACnC,IAAI;MACF;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,qCAAoCT,MAAO,EAAC,CAAC;MAC3E,MAAMU,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,IAAID,IAAI,IAAIA,IAAI,CAACd,OAAO,EAAE;QACxB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAOT,OAAO;AAChB,CAAC;AAACF,EAAA,CA1FID,UAAU;AA4FhB,eAAeA,UAAU;;AAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}