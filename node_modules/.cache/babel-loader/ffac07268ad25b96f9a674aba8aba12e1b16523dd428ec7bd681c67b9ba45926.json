{"ast":null,"code":"// import React from 'react';\n// import Header from '../../components/header/Header';\n// import Navbar from '../../components/navbar/Navbar';\n// import Footer from '../../components/footer/Footer';\n// import FontSizeChanger from '../../components/fontSizeChanger/FontSizeChanger';\n// import TextToSpeech from \"../../components/textToSpeech/TextToSpeech\";\n// import './home.css';\n\n// import { useState, useEffect } from 'react';\n\n// const Home = () => {\n//   const targetId = 'targetId';\n//   const [well, setWell] = useState('');\n\n//   useEffect(() => {\n//     const targetElement = document.getElementById(targetId);\n//     if (targetElement) {\n//       setWell(targetElement.innerText);\n//     }\n//   }, [targetId]);\n\n//   //const ok = \"well hell bell\";\n//   //cont ex = document.getElementsByClassName()\n//   return (\n//     <div>\n//       <Header />\n//       <Navbar />\n//       <FontSizeChanger initialFontSize={16} targetSelector=\".home-text\" />\n\n//       <div>\n//         <h1 >Home</h1>\n//       </div>\n//       <div>\n//         <h3 id={targetId}>\n//           EventEire is a newly established company with the aims to enable those with disabilities \n//         </h3>\n//       </div>\n//       <div className=\"home-text\">possible past and future events</div>\n//       <div className='eventsWrapper'> \n\n//         <div className='currentCont'> \n//            <h4> currently on show</h4>\n//            <div> title </div>\n//            <div> image </div>\n//            <div> text </div>\n//         </div>\n\n//         <div className='futurecont'> \n//           <h4> what to come in the future </h4>\n//            <div> title </div>\n//            <div> image </div>\n//            <div> text </div>\n//         </div>\n\n//       </div>\n//       <TextToSpeech text={well} />\n//       <div className=\"home-text\">opening times</div>\n//       <Footer />\n//     </div>\n//   );\n// };\n// export default Home;\n\n// import React, { useState, useEffect } from 'react';\n// import Header from '../../components/header/Header';\n// import { useDarkMode } from '../../pages/darkmode/DarkMode';\n// import FontSizeChanger from '../../components/fontSizeChanger/FontSizeChanger';\n// import TextToSpeech from '../../components/textToSpeech/TextToSpeech';\n// import './home.css';\n\n// const Home = () => {\n//   //const [imageName, setImageName] = useState('');\n//   const [well, setWell] = useState('');\n//   const [previewContent, setPreviewContent] = useState({ current: null, future: null });\n//   const [loggedInUser, setLoggedInUser] = useState('');\n\n//   useEffect(() => {\n//     const user = localStorage.getItem('loggedInUser');\n//     setLoggedInUser(user || '');\n//   }, []);\n\n//   const getImagePath = () => {\n//     const imagePath = previewContent.current ? require(`../../images/${previewContent.current.imgRef}.jpg`) : null;\n//     return imagePath;\n//   };\n\n//   const getImagePath2 = () => {\n//     const imagePath = previewContent.future ? require(`../../images/${previewContent.future.imgRef}.jpg`) : null;\n//     return imagePath;\n//   };\n\n//   const targetId = 'targetId';\n\n//   useEffect(() => {\n//     const targetElement = document.getElementById(targetId);\n//     if (targetElement) {\n//       setWell(targetElement.innerText);\n//     }\n//   }, [targetId]);\n\n//   useEffect(() => {\n//     const fetchPreviewContent = async () => {\n//       try {\n//         const response = await fetch('http://localhost:5000/api/previewContent');\n//         const data = await response.json();\n//         setPreviewContent({\n//           current: data.find((content) => content.type === 'current'),\n//           future: data.find((content) => content.type === 'future'),\n//         });\n//       } catch (error) {\n//         console.log('Error fetching previewContent data', error);\n//       }\n//     };\n\n//     fetchPreviewContent();\n//   }, []);\n\n//   useEffect(() => {\n//     setWell(document.getElementById(targetId)?.innerText || '');\n//   }, [previewContent]);\n\n//   const { darkMode } = useDarkMode();\n//   return (\n//     <div className={`wrapper ${darkMode ? 'dark-mode' : ''}`}>\n//       <Header />\n\n//       <div className=\"sizeChanger\">\n//         <FontSizeChanger initialFontSize={16} targetSelector=\".wrapper\" />\n//       </div>\n\n//       <div>\n//         <h1>Home</h1>\n//       </div>\n\n//       <div>\n//          {loggedInUser && <p>Welcome, {loggedInUser}</p>} {/* Display the logged-in user */}\n//       </div>\n\n//       <div>\n//         <h3>EventEire is a newly established company with the aims to enable those with disabilities</h3>\n//       </div>\n\n//       <div className=\"home-text\">possible past and future events</div>\n\n//       <div className=\"eventsWrapper\">\n//         <div className=\"currentCont\">\n//           <h4>Currently on show</h4>\n//           {previewContent.current && (\n//             <>\n//               <div>{previewContent.current.Title}</div>\n//               <img src={getImagePath()} alt={previewContent.current.imgAlt} />\n//               <div>{previewContent.current.textContent}</div>\n//             </>\n//           )}\n//         </div>\n\n//         <div className=\"futurecont\">\n//           <h4>What's to come in the future</h4>\n//           {previewContent.future && (\n//             <>\n//               <div>{previewContent.future.Title}</div>\n//               <img src={getImagePath2()} alt={previewContent.future.imgAlt} />\n//               <div id={targetId}>{previewContent.future.textContent}</div>\n//             </>\n//           )}\n//         </div>\n//       </div>\n\n//       <TextToSpeech text={well} />\n\n//       <div className=\"home-text\">opening times</div>\n//     </div>\n//   );\n// };\n\n// export default Home;\n\n// import CryptoJS from \"crypto-js\";\n// import { useState } from \"react\";\n\n// function App() {\n//   const [text, setText] = useState(\"\");\n//   const [screen, setScreen] = useState(\"encrypt\");\n\n//   const [encrptedData, setEncrptedData] = useState(\"\");\n//   const [decrptedData, setDecrptedData] = useState(\"\");\n\n//   const secretPass = \"XkhZG4fW2t2W\";\n\n//   const encryptData = () => {\n//     const data = CryptoJS.AES.encrypt(\n//       JSON.stringify(text),\n//       secretPass\n//     ).toString();\n\n//     setEncrptedData(data);\n//   };\n\n//   const decryptData = () => {\n//     const bytes = CryptoJS.AES.decrypt(text, secretPass);\n//     const data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n//     setDecrptedData(data);\n//   };\n\n//   const switchScreen = (type) => {\n//     setText(\"\");\n//     setEncrptedData(\"\");\n//     setDecrptedData(\"\");\n//     setScreen(type);\n//   };\n\n//   const handleClick = () => {\n//     if (!text) return;\n\n//     if (screen === \"encrypt\") encryptData();\n//     else decryptData();\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div>\n//         <button\n//           className=\"btn btn-left\"\n//           style={{\n//             backgroundColor: screen === \"encrypt\" ? \"#5e35b1\" : \"#5e35b130\",\n//           }}\n//           onClick={() => {\n//             switchScreen(\"encrypt\");\n//           }}\n//         >\n//           Encrypt\n//         </button>\n\n//         <button\n//           className=\"btn btn-right\"\n//           style={{\n//             backgroundColor: screen === \"decrypt\" ? \"#1e88e5\" : \"#1e88e530\",\n//           }}\n//           onClick={() => {\n//             switchScreen(\"decrypt\");\n//           }}\n//         >\n//           Decrypt\n//         </button>\n//       </div>\n\n//       <div className=\"card\">\n//         <input\n//           value={text}\n//           onChange={({ target }) => {\n//             setText(target.value);\n//           }}\n//           name=\"text\"\n//           type=\"text\"\n//           placeholder={\n//             screen === \"encrypt\" ? \"Enter Text\" : \"Enter Encrypted Data\"\n//           }\n//         />\n\n//         <button className=\"btn submit-btn\" onClick={handleClick}>\n//           {screen === \"encrypt\" ? \"Encrypt\" : \"Decrypt\"}\n//         </button>\n//       </div>\n\n//       {encrptedData || decrptedData ? (\n//         <div className=\"content\">\n//           <label>{screen === \"encrypt\" ? \"Encrypted\" : \"Decrypted\"} Data</label>\n//           <p>{screen === \"encrypt\" ? encrptedData : decrptedData}</p>\n//         </div>\n//       ) : null}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/aodha/OneDrive/Desktop/react-cw/cw4/src/pages/home/Home.js"],"sourcesContent":["// import React from 'react';\r\n// import Header from '../../components/header/Header';\r\n// import Navbar from '../../components/navbar/Navbar';\r\n// import Footer from '../../components/footer/Footer';\r\n// import FontSizeChanger from '../../components/fontSizeChanger/FontSizeChanger';\r\n// import TextToSpeech from \"../../components/textToSpeech/TextToSpeech\";\r\n// import './home.css';\r\n\r\n// import { useState, useEffect } from 'react';\r\n\r\n// const Home = () => {\r\n//   const targetId = 'targetId';\r\n//   const [well, setWell] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const targetElement = document.getElementById(targetId);\r\n//     if (targetElement) {\r\n//       setWell(targetElement.innerText);\r\n//     }\r\n//   }, [targetId]);\r\n\r\n//   //const ok = \"well hell bell\";\r\n//   //cont ex = document.getElementsByClassName()\r\n//   return (\r\n//     <div>\r\n//       <Header />\r\n//       <Navbar />\r\n//       <FontSizeChanger initialFontSize={16} targetSelector=\".home-text\" />\r\n      \r\n//       <div>\r\n//         <h1 >Home</h1>\r\n//       </div>\r\n//       <div>\r\n//         <h3 id={targetId}>\r\n//           EventEire is a newly established company with the aims to enable those with disabilities \r\n//         </h3>\r\n//       </div>\r\n//       <div className=\"home-text\">possible past and future events</div>\r\n//       <div className='eventsWrapper'> \r\n        \r\n//         <div className='currentCont'> \r\n//            <h4> currently on show</h4>\r\n//            <div> title </div>\r\n//            <div> image </div>\r\n//            <div> text </div>\r\n//         </div>\r\n\r\n//         <div className='futurecont'> \r\n//           <h4> what to come in the future </h4>\r\n//            <div> title </div>\r\n//            <div> image </div>\r\n//            <div> text </div>\r\n//         </div>\r\n\r\n//       </div>\r\n//       <TextToSpeech text={well} />\r\n//       <div className=\"home-text\">opening times</div>\r\n//       <Footer />\r\n//     </div>\r\n//   );\r\n// };\r\n// export default Home;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import Header from '../../components/header/Header';\r\n// import { useDarkMode } from '../../pages/darkmode/DarkMode';\r\n// import FontSizeChanger from '../../components/fontSizeChanger/FontSizeChanger';\r\n// import TextToSpeech from '../../components/textToSpeech/TextToSpeech';\r\n// import './home.css';\r\n\r\n// const Home = () => {\r\n//   //const [imageName, setImageName] = useState('');\r\n//   const [well, setWell] = useState('');\r\n//   const [previewContent, setPreviewContent] = useState({ current: null, future: null });\r\n//   const [loggedInUser, setLoggedInUser] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const user = localStorage.getItem('loggedInUser');\r\n//     setLoggedInUser(user || '');\r\n//   }, []);\r\n\r\n\r\n\r\n//   const getImagePath = () => {\r\n//     const imagePath = previewContent.current ? require(`../../images/${previewContent.current.imgRef}.jpg`) : null;\r\n//     return imagePath;\r\n//   };\r\n\r\n//   const getImagePath2 = () => {\r\n//     const imagePath = previewContent.future ? require(`../../images/${previewContent.future.imgRef}.jpg`) : null;\r\n//     return imagePath;\r\n//   };\r\n\r\n//   const targetId = 'targetId';\r\n\r\n//   useEffect(() => {\r\n//     const targetElement = document.getElementById(targetId);\r\n//     if (targetElement) {\r\n//       setWell(targetElement.innerText);\r\n//     }\r\n//   }, [targetId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchPreviewContent = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:5000/api/previewContent');\r\n//         const data = await response.json();\r\n//         setPreviewContent({\r\n//           current: data.find((content) => content.type === 'current'),\r\n//           future: data.find((content) => content.type === 'future'),\r\n//         });\r\n//       } catch (error) {\r\n//         console.log('Error fetching previewContent data', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPreviewContent();\r\n//   }, []);\r\n\r\n  \r\n//   useEffect(() => {\r\n//     setWell(document.getElementById(targetId)?.innerText || '');\r\n//   }, [previewContent]);\r\n\r\n//   const { darkMode } = useDarkMode();\r\n//   return (\r\n//     <div className={`wrapper ${darkMode ? 'dark-mode' : ''}`}>\r\n//       <Header />\r\n      \r\n//       <div className=\"sizeChanger\">\r\n//         <FontSizeChanger initialFontSize={16} targetSelector=\".wrapper\" />\r\n//       </div>\r\n\r\n\r\n//       <div>\r\n//         <h1>Home</h1>\r\n//       </div>\r\n\r\n//       <div>\r\n//          {loggedInUser && <p>Welcome, {loggedInUser}</p>} {/* Display the logged-in user */}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <h3>EventEire is a newly established company with the aims to enable those with disabilities</h3>\r\n//       </div>\r\n\r\n//       <div className=\"home-text\">possible past and future events</div>\r\n\r\n//       <div className=\"eventsWrapper\">\r\n//         <div className=\"currentCont\">\r\n//           <h4>Currently on show</h4>\r\n//           {previewContent.current && (\r\n//             <>\r\n//               <div>{previewContent.current.Title}</div>\r\n//               <img src={getImagePath()} alt={previewContent.current.imgAlt} />\r\n//               <div>{previewContent.current.textContent}</div>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"futurecont\">\r\n//           <h4>What's to come in the future</h4>\r\n//           {previewContent.future && (\r\n//             <>\r\n//               <div>{previewContent.future.Title}</div>\r\n//               <img src={getImagePath2()} alt={previewContent.future.imgAlt} />\r\n//               <div id={targetId}>{previewContent.future.textContent}</div>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       <TextToSpeech text={well} />\r\n\r\n//       <div className=\"home-text\">opening times</div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// export default Home;\r\n\r\n// import CryptoJS from \"crypto-js\";\r\n// import { useState } from \"react\";\r\n\r\n// function App() {\r\n//   const [text, setText] = useState(\"\");\r\n//   const [screen, setScreen] = useState(\"encrypt\");\r\n\r\n//   const [encrptedData, setEncrptedData] = useState(\"\");\r\n//   const [decrptedData, setDecrptedData] = useState(\"\");\r\n\r\n//   const secretPass = \"XkhZG4fW2t2W\";\r\n\r\n//   const encryptData = () => {\r\n//     const data = CryptoJS.AES.encrypt(\r\n//       JSON.stringify(text),\r\n//       secretPass\r\n//     ).toString();\r\n\r\n//     setEncrptedData(data);\r\n//   };\r\n\r\n//   const decryptData = () => {\r\n//     const bytes = CryptoJS.AES.decrypt(text, secretPass);\r\n//     const data = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n//     setDecrptedData(data);\r\n//   };\r\n\r\n//   const switchScreen = (type) => {\r\n//     setText(\"\");\r\n//     setEncrptedData(\"\");\r\n//     setDecrptedData(\"\");\r\n//     setScreen(type);\r\n//   };\r\n\r\n//   const handleClick = () => {\r\n//     if (!text) return;\r\n\r\n//     if (screen === \"encrypt\") encryptData();\r\n//     else decryptData();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div>\r\n//         <button\r\n//           className=\"btn btn-left\"\r\n//           style={{\r\n//             backgroundColor: screen === \"encrypt\" ? \"#5e35b1\" : \"#5e35b130\",\r\n//           }}\r\n//           onClick={() => {\r\n//             switchScreen(\"encrypt\");\r\n//           }}\r\n//         >\r\n//           Encrypt\r\n//         </button>\r\n\r\n//         <button\r\n//           className=\"btn btn-right\"\r\n//           style={{\r\n//             backgroundColor: screen === \"decrypt\" ? \"#1e88e5\" : \"#1e88e530\",\r\n//           }}\r\n//           onClick={() => {\r\n//             switchScreen(\"decrypt\");\r\n//           }}\r\n//         >\r\n//           Decrypt\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"card\">\r\n//         <input\r\n//           value={text}\r\n//           onChange={({ target }) => {\r\n//             setText(target.value);\r\n//           }}\r\n//           name=\"text\"\r\n//           type=\"text\"\r\n//           placeholder={\r\n//             screen === \"encrypt\" ? \"Enter Text\" : \"Enter Encrypted Data\"\r\n//           }\r\n//         />\r\n\r\n//         <button className=\"btn submit-btn\" onClick={handleClick}>\r\n//           {screen === \"encrypt\" ? \"Encrypt\" : \"Decrypt\"}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {encrptedData || decrptedData ? (\r\n//         <div className=\"content\">\r\n//           <label>{screen === \"encrypt\" ? \"Encrypted\" : \"Decrypted\"} Data</label>\r\n//           <p>{screen === \"encrypt\" ? encrptedData : decrptedData}</p>\r\n//         </div>\r\n//       ) : null}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}